generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URL")
  extensions = [postgis, postgis_topology]
}

model User {
  id         String      @id
  email      String      @unique
  username   String      @unique
  firstName  String?
  lastName   String?
  phone      String?
  avatar     String?
  identity   Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  addressId  String?     @db.Uuid
  address    Address?    @relation(fields: [addressId], references: [id])
  properties Propertie[]
  likes      Like[]
}

model Propertie {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String           @db.VarChar(50)
  description     String           @db.VarChar(500)
  energyClass     String           @db.VarChar(5)
  ges             String           @db.VarChar(5)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  images          Image[]
  addressId       String           @unique @db.Uuid
  address         Address          @relation(fields: [addressId], references: [id])
  price           Price?
  houseDetail     HouseDetail?     
  apartmentDetail ApartmentDetail?
  landDetail      LandDetail?
  parkingDetail   ParkingDetail?
  otherDetail     OtherDetail?
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  likes           Like[]
}

model HouseDetail {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  furnished    Boolean
  livingArea   Int
  totalArea    Int
  rooms        Int
  floorsNumber Int
  balcony      Boolean
  terrace      Boolean
  garden       Boolean
  parking      Int
  propertie    Propertie @relation(fields: [id], references: [id], onDelete: Cascade)
}

model ApartmentDetail {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  furnished    Boolean
  livingArea   Int
  rooms        Int
  floorsNumber Int
  floor        Int
  lift         Boolean
  balcony      Boolean
  terrace      Boolean
  garden       Boolean
  parking      Int
  propertie    Propertie @relation(fields: [id], references: [id], onDelete: Cascade)
}

model LandDetail {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  totalArea Int
  propertie Propertie @relation(fields: [id], references: [id], onDelete: Cascade)
}

model ParkingDetail {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parking    Int
  propertyId String    @unique @db.Uuid
  propertie  Propertie @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model OtherDetail {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  furnished    Boolean
  livingArea   Int
  totalArea    Int
  rooms        Int
  lift         Boolean
  floorsNumber Int
  floor        Int
  balcony      Boolean
  terrace      Boolean
  garden       Boolean
  parking      Int
  propertie    Propertie @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Address {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  // street     String
  // city       String
  // postalCode String
  // country    String
  users      User[]
  properties Propertie[]
  // the geometry column itself
  // coordinate Unsupported("geography(Point,4326)")

  // the index for that column --> https://freddydumont.com/blog/prisma-postgis
  // @@index([coordinate], name: "location_idx", type: Gist)

  // pour utiliser les fonctions postgis il faut faire des prisma.$queryRaw (des requ√®tes brutes)
}

model Price {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  price      Int
  propertie  Propertie @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Image {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url         String
  propertieId String    @db.Uuid
  propertie   Propertie @relation(fields: [propertieId], references: [id], onDelete: Cascade)
}

model Like {
  id          Int       @id @default(autoincrement())
  userId      String
  propertieId String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertie   Propertie @relation(fields: [propertieId], references: [id], onDelete: Cascade)

  @@unique([userId, propertieId])
}
